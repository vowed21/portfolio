{"version":3,"sources":["comps/Header.jsx","comps/Intro.jsx","comps/Project.jsx","comps/ETC.jsx","comps/OpenSource.jsx","App.jsx","serviceWorker.js","index.js"],"names":["menusArr","Header","headerMode","headerRef","React","createRef","state","selectedMenu","initElements","elProject","document","querySelector","elOpenSource","elETC","elAboutMe","elContact","handleScroll","event","console","log","window","pageYOffset","offset","datum","innerHeight","current","style","backgroundColor","alpha","offsetTop","setState","MenuItem","title","className","onClick","el","scrollTo","offsetHeight","addEventListener","this","removeEventListener","ref","flexGrow","map","index","key","Component","Intro","introRef","backgroundPosition","backImgUrl","process","id","backgroundImage","Project","ETC","OpenSource","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.7a077d3f.chunk.js","sourcesContent":["import React from 'react'\n\nconst MENU_INTRO = 'Intro'\nconst MENU_PROJECT = 'Project'\nconst MENU_OPENSOURCE = 'OpenSource'\nconst MENU_ETC = 'ETC'\nconst MENU_ABOUTME = 'AboutMe'\nconst MENU_CONTACT = 'Contact'\n\nconst menusArr = [MENU_INTRO, MENU_PROJECT, MENU_OPENSOURCE, MENU_ETC, MENU_ABOUTME, MENU_CONTACT]\nconst HEADER_MODE_TRANSPARENT = 0\nconst HEADER_MODE_ALPHA = 1\nconst HEADER_MODE_FILLED = 2\nconst ALPHA_FILLED = 0.85\n\n\n\nexport default class Header extends React.Component {\n\n  headerMode = HEADER_MODE_TRANSPARENT\n  headerRef = React.createRef();\n  state = {selectedMenu: menusArr[0]}\n\n  \n  elProject; elOpenSource; elETC; elAboutMe; elContact;\n\n  initElements = () => {\n    if(this.elProject == null){\n      this.elProject = document.querySelector('#'+MENU_PROJECT)\n      this.elOpenSource = document.querySelector('#'+MENU_OPENSOURCE)\n      this.elETC = document.querySelector('#'+MENU_ETC)\n      this.elAboutMe = document.querySelector('#'+MENU_ABOUTME)\n      this.elContact = document.querySelector('#'+MENU_CONTACT)\n    }\n  }\n\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll)\n    console.log('헤더의 디드마운트.')\n  }\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll)\n  }\n\n\n  handleScroll = (event) => {\n\n    this.initElements()\n\n    console.log(window.pageYOffset)\n    const offset = window.pageYOffset\n    const datum = window.innerHeight / 2\n    if(offset < datum && this.headerMode !== HEADER_MODE_TRANSPARENT) {\n      this.headerRef.current.style.backgroundColor = 'transparent';\n      this.headerMode = HEADER_MODE_TRANSPARENT\n      // console.log('헤더 트랜스 파렌트!!!')\n    }\n    else if (offset >= datum && offset < window.innerHeight) {\n      this.headerMode = HEADER_MODE_ALPHA\n      const alpha = (offset-datum) / datum * ALPHA_FILLED\n      this.headerRef.current.style.backgroundColor = `rgba(0,0,0,${alpha})`\n      // console.log('헤더 알파')\n    }\n    else if(offset >= window.innerHeight && this.headerMode !== HEADER_MODE_FILLED) {\n      this.headerMode = HEADER_MODE_FILLED\n      // console.log('헤더 필드!!!!')\n      this.headerRef.current.style.backgroundColor = `rgba(0,0,0,${ALPHA_FILLED})`\n    }\n\n    //메뉴 선택표시 되게 해주자.\n    if(offset <= this.elProject.offsetTop - datum) {\n      this.setState({selectedMenu: MENU_INTRO})\n    }\n    else if(offset <= this.elOpenSource.offsetTop - datum) {\n      this.setState({selectedMenu: MENU_PROJECT})\n    }\n    else if(offset <= this.elETC.offsetTop - datum) {\n      this.setState({selectedMenu: MENU_OPENSOURCE})\n    }\n\n\n\n  }\n\n  MenuItem = ({title}) => {\n\n    const clickItem = () => {\n      const el = document.querySelector('#'+title)\n      if(el) {\n        window.scrollTo(0, el.offsetTop - this.headerRef.current.offsetHeight)\n        this.setState({selectedMenu: title})\n      }\n    }\n    \n    let className = \"menu-item\"\n    if(this.state.selectedMenu === title) {\n      className += \" selected\"\n    }\n\n    return (\n      <div className={className} onClick={clickItem} >{title}</div>\n    )\n  }\n\n\n  render() {\n\n    return (\n      <header ref={this.headerRef} >\n        <div className=\"wrapper wrap-header\">\n          <div style={{flexGrow:'1'}} />\n          {menusArr.map((title, index) => (<this.MenuItem title={title} key={index} />))}\n        </div>\n      </header>\n    )\n  }\n\n} \n\n\n  \n","import React from 'react'\n\nexport default class Intro extends React.Component {\n\n  introRef = React.createRef();\n\n  componentDidMount() {\n    window.addEventListener('scroll', this.handleScroll)\n    console.log('컴포넌트 디드 마운트.', this.introRef.current)\n  }\n  componentWillUnmount() {\n    window.removeEventListener('scroll', this.handleScroll)\n  }\n\n  componentDidUpdate() {\n    console.log('컴포넌트 디드 업데이트.', this.introRef.current)\n  }\n\n  handleScroll = (event) => {\n    // console.log(window.pageYOffset)\n    if(window.pageYOffset < window.innerHeight) {\n      this.introRef.current.style.backgroundPosition = `right bottom -${window.pageYOffset/2}px`\n    }\n  }\n\n  \n  render() {\n\n    const backImgUrl = `url(${process.env.PUBLIC_URL}/assets/profile1.jpg)`\n    return (\n      <div id=\"Intro\" style={{backgroundImage:backImgUrl}} ref={this.introRef} >\n        <div id=\"wrap-text\" >\n          <h1>Developer<br/>김현우</h1>\n          {/* <h2>새로운 서비스를 만드는게 제일 좋아</h2> */}\n          <p>#iOS, #ANDROID, #REACT, #PHP, #AWS</p>\n        </div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nconst Project = () => {\n\n\n  return (\n    <div id=\"Project\">\n      <h1>프로젝트</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      \n      <h1>포폴</h1>\n      \n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n    </div>\n  )\n}\n\nexport default Project","import React from 'react'\n\nconst ETC = () => {\n\n\n  return (\n    <div id=\"ETC\">\n      <h1>ETC</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      \n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n    </div>\n  )\n}\n\nexport default ETC","import React from 'react'\n\nconst OpenSource = () => {\n\n\n  return (\n    <div id=\"OpenSource\">\n      <h1>오픈소스</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      \n      <h1>포폴</h1>\n      <h1>포폴</h1>\n      <h1>포폴</h1>\n    </div>\n  )\n}\n\nexport default OpenSource","import React from 'react';\nimport './App.scss';\n\nimport Header from  './comps/Header'\nimport Intro from './comps/Intro'\nimport Project from './comps/Project';\nimport ETC from './comps/ETC';\nimport OpenSource from './comps/OpenSource'\n\n\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      \n      <Intro />\n      <Header />\n      <Project />\n      <OpenSource />\n      <ETC />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}